STEP TO PUSH TO GITHUB
get a folder or create a folder
use git init to initialize the folder
and go to your github to create a repository
push all you want to push through this folder
after you initialize this folder then add some files to the folder and use git.add to add it to the repo
and use git log and git status to check the log and status
use git commit -m"name the file or folder" to commit the file
then proceed to use git push -u origin and the name of the branch e.g Master or main and push to the repository.




SWITCH TO A NEW BRANCH
$ git switch -c "master"
TO COMMIT A FILE OR FOLDER
Run 'git clean -n' to see a dry run;
Run 'git clean -f' to force untracked file deletion;
Use 'git clean -f -d' to remove untracked directories;
Use 'git clean -f -x' to remove untracked . gitignore files; and.
Add the -i switch to do an interactive 'git clean'.
======================================
mkdir Git_Demo

cd Git_Demo

pwd
=============
mkdir FirstRepo

cd FirstRepo

pwd
===================
Git init

======================
TO CHECK CURRENT WORKING DIRECTORY
pwd
=============================


23470@ETHANIM MINGW64 ~/Desktop (embryo)
$ git help
usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--super-prefix=<path>] [--config-env=<name>=<envvar>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   rm        Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   grep      Print lines matching a pattern
   log       Show commit logs
   show      Show various types of objects
   status    Show the working tree status

grow, mark and tweak your common history
   branch    List, create, or delete branches
   commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch     Download objects and refs from another repository
   pull      Fetch from and integrate with another repository or a local branch
   push      Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system






 FRMYT/
        LKD/
        MODULE/
        PORTFOLIO/
        PROJECT.txt
        PROJECT/
        PYTHON LECTURE VIDEO/
        PYTHON/
        Pclass/
        STUTERN/
        Visual Studio Code.lnk
        Where are my files.lnk
        all from desktop/
        allnew/
        clonegit/
        desktop.ini
        icofont/
        linkedin/
        projectq/




.
